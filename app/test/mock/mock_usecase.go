// Code generated by MockGen. DO NOT EDIT.
// Source: ./app/domain/usecase/usecase.go
//
// Generated by this command:
//
//	mockgen -source=./app/domain/usecase/usecase.go -destination=./app/test/mock/mock_usecase.go
//

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	context "context"
	reflect "reflect"

	entity "github.com/techhub-jf/farmacia-back/app/domain/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockaccountsRepository is a mock of accountsRepository interface.
type MockaccountsRepository struct {
	ctrl     *gomock.Controller
	recorder *MockaccountsRepositoryMockRecorder
}

// MockaccountsRepositoryMockRecorder is the mock recorder for MockaccountsRepository.
type MockaccountsRepositoryMockRecorder struct {
	mock *MockaccountsRepository
}

// NewMockaccountsRepository creates a new mock instance.
func NewMockaccountsRepository(ctrl *gomock.Controller) *MockaccountsRepository {
	mock := &MockaccountsRepository{ctrl: ctrl}
	mock.recorder = &MockaccountsRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockaccountsRepository) EXPECT() *MockaccountsRepositoryMockRecorder {
	return m.recorder
}

// GetAccountByEmail mocks base method.
func (m *MockaccountsRepository) GetAccountByEmail(ctx context.Context, email string) (entity.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountByEmail", ctx, email)
	ret0, _ := ret[0].(entity.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountByEmail indicates an expected call of GetAccountByEmail.
func (mr *MockaccountsRepositoryMockRecorder) GetAccountByEmail(ctx, email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountByEmail", reflect.TypeOf((*MockaccountsRepository)(nil).GetAccountByEmail), ctx, email)
}
